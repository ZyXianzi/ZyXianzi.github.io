import{_ as e,c as o,o as c,d as a}from"./app.fd4378a2.js";const m=JSON.parse('{"title":"Docker基本命令","description":"","frontmatter":{},"headers":[{"level":2,"title":"镜像(image)相关命令","slug":"镜像-image-相关命令","link":"#镜像-image-相关命令","children":[]},{"level":2,"title":"容器(container)相关命令","slug":"容器-container-相关命令","link":"#容器-container-相关命令","children":[]},{"level":2,"title":"常用配置","slug":"常用配置","link":"#常用配置","children":[]}],"relativePath":"tools/docker/basic-commands.md","lastUpdated":1677229775000}'),d={name:"tools/docker/basic-commands.md"},l=a(`<h1 id="docker基本命令" tabindex="-1">Docker基本命令 <a class="header-anchor" href="#docker基本命令" aria-hidden="true">#</a></h1><h2 id="镜像-image-相关命令" tabindex="-1">镜像(image)相关命令 <a class="header-anchor" href="#镜像-image-相关命令" aria-hidden="true">#</a></h2><ol><li><code>docker pull ubuntu:22.04</code>：拉取一个镜像</li><li><code>docker images</code>：列出本地所有镜像</li><li><code>docker image rm ubuntu:22.04</code> 或 <code>docker rmi ubuntu:22.04</code>：删除镜像<code>ubuntu:22.04</code></li><li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像</li><li><code>docker save -o ubuntu_22_04.tar ubuntu:22.04</code>：将镜像<code>ubuntu:22.04</code>导出到本地文件<code>ubuntu_22_04.tar</code>中</li><li><code>docker load -i ubuntu_22_04.tar</code>：将镜像<code>ubuntu:22.04</code>从本地文件<code>ubuntu_22_04.tar</code>中加载出来</li></ol><h2 id="容器-container-相关命令" tabindex="-1">容器(container)相关命令 <a class="header-anchor" href="#容器-container-相关命令" aria-hidden="true">#</a></h2><ol><li><code>docker [container] create -it ubuntu:22.04</code>：利用镜像<code>ubuntu:22.04</code>创建一个容器。</li><li><code>docker ps -a</code>：查看本地的所有容器</li><li><code>docker [container] start CONTAINER</code>：启动容器</li><li><code>docker [container] stop CONTAINER</code>：停止容器</li><li><code>docker [container] restart CONTAINER</code>：重启容器</li><li><code>docker [contaienr] run -itd ubuntu:22.04</code>：创建并启动一个容器</li><li><code>docker [container] attach CONTAINER</code>：进入容器 <ul><li>先按Ctrl-p，再按Ctrl-q可以挂起容器</li></ul></li><li><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令</li><li><code>docker [container] rm CONTAINER</code>：删除容器</li><li><code>docker container prune</code>：删除所有已停止的容器</li><li><code>docker export -o ctr.tar CONTAINER</code>：将容器CONTAINER导出到本地文件<code>ctr.tar</code>中</li><li><code>docker import xxx.tar image_name:tag</code>：将本地文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>docker export/import</code>与<code>docker save/load</code>的区别：</p><ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul></div><ol start="13"><li><code>docker top CONTAINER</code>：查看某个容器内的所有进程</li><li><code>docker stats</code>：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li><code>docker cp a.txt CONTAINER:a.txt</code> 或 <code>docker cp CONTAINER:a.txt a.txt</code>：在本地和容器间复制文件</li><li><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</li><li><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</li></ol><h2 id="常用配置" tabindex="-1">常用配置 <a class="header-anchor" href="#常用配置" aria-hidden="true">#</a></h2><p>为了避免每次使用<code>docker</code>命令都需要加上<code>sudo</code>权限，可以将当前用户加入安装中自动创建的<code>docker</code>用户组(可以参考<a href="https://docs.docker.com/engine/install/linux-postinstall/" target="_blank" rel="noreferrer">官方文档</a>)：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">usermod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-aG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> $USER</span></span>
<span class="line"></span></code></pre></div><p>执行完此操作后需要重启当前shell才能使其生效，或者执行如下命令更新用户组设置：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">newgrp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 更新docker用户组</span></span>
<span class="line"></span></code></pre></div>`,12),t=[l];function i(n,r,s,p,u,k){return c(),o("div",null,t)}const C=e(d,[["render",i]]);export{m as __pageData,C as default};
