import{_ as e,c as a,o as l,d as s}from"./app.70ec9bf7.js";const y=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[{"level":2,"title":"Git基本概念","slug":"git基本概念","link":"#git基本概念","children":[]},{"level":2,"title":"Git常用命令","slug":"git常用命令","link":"#git常用命令","children":[]},{"level":2,"title":"Git分支开发规范","slug":"git分支开发规范","link":"#git分支开发规范","children":[{"level":3,"title":"master分支","slug":"master分支","link":"#master分支","children":[]},{"level":3,"title":"develop分支","slug":"develop分支","link":"#develop分支","children":[]},{"level":3,"title":"feature分支","slug":"feature分支","link":"#feature分支","children":[]},{"level":3,"title":"release分支","slug":"release分支","link":"#release分支","children":[]},{"level":3,"title":"hotfix分支","slug":"hotfix分支","link":"#hotfix分支","children":[]}]},{"level":2,"title":"常见任务","slug":"常见任务","link":"#常见任务","children":[{"level":3,"title":"增加新功能","slug":"增加新功能","link":"#增加新功能","children":[]},{"level":3,"title":"修复紧急bug","slug":"修复紧急bug","link":"#修复紧急bug","children":[]},{"level":3,"title":"生产环境上线","slug":"生产环境上线","link":"#生产环境上线","children":[]}]}],"relativePath":"tools/git.md","lastUpdated":1675425445000}'),n={name:"tools/git.md"},o=s(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-hidden="true">#</a></h1><h2 id="git基本概念" tabindex="-1">Git基本概念 <a class="header-anchor" href="#git基本概念" aria-hidden="true">#</a></h2><ul><li><p>工作区：仓库的目录。工作区是独立于各个分支的。</p></li><li><p>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是-独立于各个分支的。</p></li><li><p>版本库：存放所有已经提交到本地仓库的代码版本。</p></li><li><p>版本结构：树结构，树中每个节点代表一个代码版本。</p></li></ul><h2 id="git常用命令" tabindex="-1">Git常用命令 <a class="header-anchor" href="#git常用命令" aria-hidden="true">#</a></h2><ol><li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</li><li><code>git add XX</code>：将XX文件添加到暂存区</li><li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区</li><li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉</li><li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li><li><code>git status</code>：查看仓库状态</li><li><code>git diff XX</code>：查看XX文件相对于暂存区修改了哪些内容</li><li><code>git log</code>：查看当前分支的所有版本</li><li><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</li><li><code>git reset --hard HEAD^ </code>或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一版本</li><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li><li><code>git checkout — XX</code>或<code>git restore XX</code>：将XX文件尚未加入暂存区的修改全部撤销</li><li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li><li><code>git push -u (第一次需要-u以后不需要)</code>：将当前分支推送到远程仓库</li><li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li><li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li><li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li><li><code>git branch</code>：查看所有分支和当前所处分支</li><li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li><li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li><li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li><li><code>git branch branch_name</code>：创建新分支</li><li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li><li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li><li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li><li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li><li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li><li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li><li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li><li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li><li><code>git stash drop</code>：删除栈顶存储的修改</li><li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li><li><code>git stash list</code>：查看栈中所有元素</li></ol><h2 id="git分支开发规范" tabindex="-1">Git分支开发规范 <a class="header-anchor" href="#git分支开发规范" aria-hidden="true">#</a></h2><h3 id="master分支" tabindex="-1">master分支 <a class="header-anchor" href="#master分支" aria-hidden="true">#</a></h3><ul><li>master 为主分支，也是用于部署生产环境的分支，确保master分支稳定性</li><li>master 分支一般由develop以及hotfix分支合并，任何时间都不能直接修改代码</li></ul><h3 id="develop分支" tabindex="-1">develop分支 <a class="header-anchor" href="#develop分支" aria-hidden="true">#</a></h3><ul><li>develop为开发分支，始终保持最新完成以及bug修复后的代码</li><li>一般开发的新功能时，feature分支都是基于develop分支下创建的</li></ul><h3 id="feature分支" tabindex="-1">feature分支 <a class="header-anchor" href="#feature分支" aria-hidden="true">#</a></h3><ul><li>开发新功能时，以develop为基础创建feature分支</li><li>分支命名: feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module</li></ul><h3 id="release分支" tabindex="-1">release分支 <a class="header-anchor" href="#release分支" aria-hidden="true">#</a></h3><ul><li>release为预上线分支，发布提测阶段，会release分支代码为基准提测</li></ul><h3 id="hotfix分支" tabindex="-1">hotfix分支 <a class="header-anchor" href="#hotfix分支" aria-hidden="true">#</a></h3><ul><li>分支命名: hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似</li><li>线上出现紧急问题时，需要及时修复，以master分支为基线，创建hotfix分支，修复完成后，需要合并到master分支和develop分支</li></ul><h2 id="常见任务" tabindex="-1">常见任务 <a class="header-anchor" href="#常见任务" aria-hidden="true">#</a></h2><h3 id="增加新功能" tabindex="-1">增加新功能 <a class="header-anchor" href="#增加新功能" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git checkout -b feature/xxx            </span><span style="color:#676E95;font-style:italic;"># 从dev建立特性分支</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">feature/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: blabla                         </span><span style="color:#676E95;font-style:italic;"># 开发</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">feature/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git add xxx</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">feature/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git commit -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">commit comment</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git merge feature/xxx --no-ff          </span><span style="color:#676E95;font-style:italic;"># 把特性分支合并到dev</span></span>
<span class="line"></span></code></pre></div><h3 id="修复紧急bug" tabindex="-1">修复紧急bug <a class="header-anchor" href="#修复紧急bug" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git checkout -b hotfix/xxx         </span><span style="color:#676E95;font-style:italic;"># 从master建立hotfix分支</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">hotfix/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: blabla                         </span><span style="color:#676E95;font-style:italic;"># 开发</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">hotfix/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git add xxx</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">hotfix/xxx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git commit -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">commit comment</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git merge hotfix/xxx --no-ff       </span><span style="color:#676E95;font-style:italic;"># 把hotfix分支合并到master，并上线到生产环境</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git merge hotfix/xxx --no-ff          </span><span style="color:#676E95;font-style:italic;"># 把hotfix分支合并到dev，同步代码</span></span>
<span class="line"></span></code></pre></div><h4 id="测试环境代码" tabindex="-1">测试环境代码 <a class="header-anchor" href="#测试环境代码" aria-hidden="true">#</a></h4><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">release</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git merge dev --no-ff             </span><span style="color:#676E95;font-style:italic;"># 把dev分支合并到release，然后在测试环境拉取并测试</span></span>
<span class="line"></span></code></pre></div><h3 id="生产环境上线" tabindex="-1">生产环境上线 <a class="header-anchor" href="#生产环境上线" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git merge release --no-ff          </span><span style="color:#676E95;font-style:italic;"># 把release测试好的代码合并到master，运维人员操作</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">$: git tag -a v0.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">部署包版本名</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#给版本命名，打Tag</span></span>
<span class="line"></span></code></pre></div>`,25),t=[o];function i(c,r,p,d,h,g){return l(),a("div",null,t)}const F=e(n,[["render",i]]);export{y as __pageData,F as default};
